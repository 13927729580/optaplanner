<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="scoreCalculation" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Score calculation</title>

  <section>
    <title>Rule based score calculation</title>

    <para>The score calculation (or fitness function) of a planning problem is based on constraints (such as hard
    constraints, soft constraints, rewards, ...). A rule engine, such as Drools Expert, makes it easy to implement those
    constraints as <emphasis>score rules</emphasis>.</para>

    <para><emphasis role="bold">Adding more constraints is <emphasis role="bold">easy and </emphasis>scalable</emphasis>
    (once you understand the DRL syntax). This allows you to add a bunch of soft constraint score rules on top of the
    hard constraints score rules with little effort and at a reasonable performance cost. For example, for a freight
    routing problem you could add a soft constraint to avoid the certain flagged highways during rush hour.</para>
  </section>

  <section>
    <title>Choosing a Score implementation</title>

    <section>
      <title>The ScoreDefinition interface</title>

      <para>The <literal>ScoreDefinition</literal> interface defines the score representation. The score must be a
      <literal>Score</literal> instance and the instance type (for example <literal>DefaultHardAndSoftScore</literal>)
      must be stable throughout the solver runtime.</para>

      <para>The solver aims to find the solution with the highest score. <emphasis>The best solution</emphasis> is the
      solution with the highest score that it has encountered during its solving.</para>

      <note>
        <para>Most planning problems use negative scores, because they use negative constraints. The score is usually
        the sum of the weight of the negative constraints being broken, with an impossible perfect score of 0. This
        explains why the score of a solution of 4 queens is the negative of the number of queen couples which can attack
        each other.</para>
      </note>

      <para>Configure a <literal>ScoreDefinition</literal> in the solver configuration. You can implement a custom
      <literal>ScoreDefinition</literal>, although the build-in score definitions should suffice for most needs:</para>
    </section>

    <section>
      <title>SimpleScore</title>

      <para>The <literal>SimpleScoreDefinition</literal> defines the <literal>Score</literal> as a
      <literal>SimpleScore</literal> which has a single int value, for example <literal>-123</literal>.</para>

      <programlisting language="xml">    &lt;scoreDefinition&gt;
        &lt;scoreDefinitionType&gt;SIMPLE&lt;/scoreDefinitionType&gt;
    &lt;/scoreDefinition&gt;</programlisting>
    </section>

    <section>
      <title>HardAndSoftScore</title>

      <para>The <literal>HardAndSoftScoreDefinition</literal> defines the <literal>Score</literal> as a
      <literal>HardAndSoftScore</literal> which has a hard int value and a soft int value, for example
      <literal>-123hard/-456soft</literal>.</para>

      <programlisting language="xml">    &lt;scoreDefinition&gt;
        &lt;scoreDefinitionType&gt;HARD_AND_SOFT&lt;/scoreDefinitionType&gt;
    &lt;/scoreDefinition&gt;</programlisting>
    </section>

    <section>
      <title>Implementing a custom Score</title>

      <para>To implement a custom Score, you 'll also need to implement a custom <literal>ScoreDefinition</literal>.
      Extend <literal>AbstractScoreDefinition</literal> (preferable by copy pasting
      <literal>HardAndSoftScoreDefinition</literal> or <literal>SimpleScoreDefinition</literal>) and start from
      there.</para>

      <para>Then hook you custom <literal>ScoreDefinition</literal> in your
      <filename>SolverConfig.xml</filename>:</para>

      <programlisting language="xml">    &lt;scoreDefinition&gt;
        &lt;scoreDefinitionClass&gt;org.drools.planner.examples.my.score.definition.MyScoreDefinition&lt;/scoreDefinitionClass&gt;
    &lt;/scoreDefinition&gt;</programlisting>
    </section>
  </section>

  <section>
    <title>Defining the score rules source</title>

    <para>There are 2 ways to define where your score rules live.</para>

    <section>
      <title>A scoreDrl resource on the classpath</title>

      <para>This is the simplest way: the score rule live in a DRL file which is a resource on the classpath. Just add
      your score rules <filename>*.drl</filename> file in the solver configuration, for example:</para>

      <programlisting language="xml">    &lt;scoreDrl&gt;/org/drools/planner/examples/nqueens/solver/nQueensScoreRules.drl&lt;/scoreDrl&gt;</programlisting>

      <para>You can add multiple <literal>&lt;scoreDrl&gt;</literal> entries if needed, but normally you 'll define all
      your score rules in 1 file.</para>
    </section>

    <section>
      <title>A RuleBase (possibly defined by Guvnor)</title>

      <para>If you prefer to build the <literal>RuleBase</literal> yourself or if you're combining Planner with Guvnor,
      you can set the <literal>RuleBase</literal> on the <literal>XmlSolverFactory</literal> before building the
      <literal>Solver</literal>:</para>

      <programlisting language="xml">    solverFactory.getSolverConfig().setRuleBase(ruleBase);</programlisting>
    </section>
  </section>

  <section>
    <title>Implementing a score rule</title>

    <para>The score calculation of a planning problem is based on constraints (such as hard constraints, soft
    constraints, rewards, ...). A rule engine, such as Drools, makes it easy to implement those constraints as
    <emphasis>score rules</emphasis>.</para>

    <para>Here's an example of a constraint implemented as a score rule in such a DRL file:</para>

    <programlisting>rule "multipleQueensHorizontal"
    when
        $q1 : Queen($id : id, $y : y);
        $q2 : Queen(id &gt; $id, y == $y);
    then
        insertLogical(new UnweightedConstraintOccurrence("multipleQueensHorizontal", $q1, $q2));
end</programlisting>

    <para>This score rule will fire once for every 2 queens with the same <literal>y</literal>. The <literal>(id &gt;
    $id)</literal> condition is needed to assure that for 2 queens A and B, it can only fire for (A, B) and not for (B,
    A), (A, A) or (B, B). Let's take a closer look at this score rule on this solution of 4 queens:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Score_calculation/unsolvedNQueens04.png" format="PNG"></imagedata>
      </imageobject>
    </mediaobject>

    <para>In this solution the multipleQueensHorizontal score rule will fire for 6 queen couples: (A, B), (A, C), (A,
    D), (B, C), (B, D) and (C, D). Because none of the queens are on the same vertical or diagonal line, this solution
    will have a score of <literal>-6</literal>. An optimal solution of 4 queens has a score of
    <literal>0</literal>.</para>

    <note>
      <para>Notice that every score rule will relate to at least 1 planning entity class (directly or indirectly though
      a logically inserted fact).</para>

      <para>This is normal: it would be a waste of time to write a score rule that only relates to problem facts, as the
      consequence will never change during planning, no matter what the possible solution.</para>
    </note>
  </section>

  <section>
    <title>Aggregating the score rules into the <literal>Score</literal></title>

    <para>A <literal>ScoreCalculator</literal> instance is asserted into the <literal>WorkingMemory</literal> as a
    global called <literal>scoreCalculator</literal>. Your score rules need to (direclty or indirectly) update that
    instance. Usually you 'll make a single rule as an aggregation of the other rules to update the score:</para>

    <programlisting>global SimpleScoreCalculator scoreCalculator;

rule "multipleQueensHorizontal"
    when
        $q1 : Queen($id : id, $y : y);
        $q2 : Queen(id &gt; $id, y == $y);
    then
        insertLogical(new UnweightedConstraintOccurrence("multipleQueensHorizontal", $q1, $q2));
end

// multipleQueensVertical is obsolete because it is always 0

rule "multipleQueensAscendingDiagonal"
    when
        $q1 : Queen($id : id, $ascendingD : ascendingD);
        $q2 : Queen(id &gt; $id, ascendingD == $ascendingD);
    then
        insertLogical(new UnweightedConstraintOccurrence("multipleQueensAscendingDiagonal", $q1, $q2));
end

rule "multipleQueensDescendingDiagonal"
    when
        $q1 : Queen($id : id, $descendingD : descendingD);
        $q2 : Queen(id &gt; $id, descendingD == $descendingD);
    then
        insertLogical(new UnweightedConstraintOccurrence("multipleQueensDescendingDiagonal", $q1, $q2));
end

rule "hardConstraintsBroken"
    when
        $occurrenceCount : Number() from accumulate(
            $unweightedConstraintOccurrence : UnweightedConstraintOccurrence(),
            count($unweightedConstraintOccurrence)
        );
    then
        scoreCalculator.setScore(- $occurrenceCount.intValue());
end</programlisting>

    <para>Most use cases will also weigh their constraints differently, by multiplying the count of each score rule with
    its weight. For example in freight routing, you can make 5 broken "avoid crossroads" soft constraints count as much
    as 1 broken "avoid highways at rush hour" soft constraint. This allows your business analysts to easily tweak the
    score function as they see fit.</para>

    <para>Here's an example from CurriculumCourse, where assiging a <literal>Lecture</literal> to a
    <literal>Room</literal> which is missing 2 seats is weighted equally bad as having 1 isolated
    <literal>Lecture</literal> in a <literal>Curriculum</literal>:</para>

    <programlisting>// RoomCapacity: For each lecture, the number of students that attend the course must be less or equal
// than the number of seats of all the rooms that host its lectures.
// Each student above the capacity counts as 1 point of penalty.
rule "roomCapacity"
    when
        ...
    then
        insertLogical(new IntConstraintOccurrence("roomCapacity", ConstraintType.NEGATIVE_SOFT,
                ($studentSize - $capacity),
                ...));
end

// CurriculumCompactness: Lectures belonging to a curriculum should be adjacent
// to each other (i.e., in consecutive periods).
// For a given curriculum we account for a violation every time there is one lecture not adjacent
// to any other lecture within the same day.
// Each isolated lecture in a curriculum counts as 2 points of penalty.
rule "curriculumCompactness"
    when
        ...
    then
        insertLogical(new IntConstraintOccurrence("curriculumCompactness", ConstraintType.NEGATIVE_SOFT,
                2,
                ...));
end


// Accumulate soft constraints
rule "softConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $softTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_SOFT, $weight : weight),
            sum($weight)
        )
    then
        scoreCalculator.setSoftConstraintsBroken($softTotal.intValue());
end</programlisting>
  </section>

  <section xml:id="deltaBasedScoreCalculation">
    <title>Delta based score calculation</title>

    <para>It's recommended to use Drools in forward-chaining mode (which is the default behaviour), because this will
    create the effect of a <emphasis>delta based score calculation</emphasis>, instead of a full score calculation on
    each solution evaluation. For example, if a single queen A moves from y <literal>0</literal> to
    <literal>3</literal>, it won't bother to recalculate the "multiple queens on the same horizontal line" constraint
    between 2 queens if neither of those involved queens is queen A.</para>

    <para>This is a huge performance and scalibility gain. <emphasis role="bold">Drools Planner gives you this huge
    scalibility gain without forcing you to write a very complicated delta based score calculation algorithm.</emphasis>
    Just let the Drools rule engine do the hard work.</para>

    <figure>
      <title>Delta based score calculation for the 4 queens puzzle</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Score_calculation/deltaBasedScoreCalculationNQueens04.png" format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The speedup due to delta based score calculation is huge, because the speedup is relative to the size of your
    planning problem (your <emphasis>n</emphasis>). By using score rules, you get that speedup without writing any delta
    code.</para>
  </section>

  <section>
    <title>Tips and tricks</title>

    <itemizedlist>
      <listitem>
        <para>If you know a certain constraint can never be broken, don't bother writing a score rule for it. For
        example in n queens, there is no "multipleQueensVertical" rule because a <literal>Queen</literal>'s
        <literal>column</literal> never changes and each <literal>Solution</literal> build puts each
        <literal>Queen</literal> on a different <literal>column</literal>. This tends to give a huge performance gain,
        not just because the score function is faster, but mainly because most <literal>Solver</literal> implementations
        will spend less time evaluating unfeasible solutions.</para>
      </listitem>

      <listitem>
        <para>Be watchfull for score traps. A score trap is a state in which several moves need to be done to resolve or
        lower the weight of a single constraint occurrence. Some examples of score traps:</para>

        <itemizedlist>
          <listitem>
            <para>If you need 2 doctors at each table, but you're only moving 1 doctor at a time, then the solver has no
            insentive to move a doctor to a table with no doctors. Punish a table with no doctors more then a table with
            only 1 doctor in your score function.</para>
          </listitem>

          <listitem>
            <para>If you only add the table as a cause of the ConstraintOccurrence and forget the jobType (which is
            doctor or politician), then the solver has no insentive to move a docter to table which is short of a doctor
            and a politician.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>If you use tabu search, combine it with a <literal>minimalAcceptedSelection</literal> selector. Take some
        time to tweak the value of <literal>minimalAcceptedSelection</literal>.</para>
      </listitem>

      <listitem>
        <para>Verify that your score calculation happens in the correct <literal>Number</literal> type. If you're making
        the sum of integer values, don't let drools use Double's or your performance will hurt. The
        <literal>Solver</literal> will usually spend most of its execution time running the score function.</para>
      </listitem>

      <listitem>
        <para>Always remember that premature optimization is the root of all evil. Make sure your design is flexible
        enough to allow configuration based tweaking.</para>
      </listitem>

      <listitem>
        <para>Currently, don't allow drools to backward chain instead of forward chain, so avoid query's. It kills delta
        based score calculation (so it kills scalibility).</para>
      </listitem>

      <listitem>
        <para>Currently, don't allow drools to switch to MVEL mode, for performance.</para>
      </listitem>

      <listitem>
        <para>For optimal performance, use at least java 1.6 and always use server mode (<literal>java
        -server</literal>). We have seen performance increases of 30% by switching from java 1.5 to 1.6 and 50% by
        turning on server mode.</para>
      </listitem>

      <listitem>
        <para>If you're doing performance tests, always remember that the JVM needs to warm up. First load your
        <literal>Solver</literal> and do a short run, before you start benchmarking it.</para>
      </listitem>
    </itemizedlist>

    <para>In case you haven't figured it out yet: performance (and scalability) is very important for solving planning
    problems well. What good is a real-time freight routing solver that takes a day to find a feasible solution? Even
    small and innocent looking problems can hide an enormous problem size. For example, they probably still don't know
    the optimal solution of the traveling tournament problem for as little as 12 traveling teams.</para>
  </section>
</chapter>
