<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Repeated planning</title>

  <section>
    <title>Introduction to repeated planning</title>

    <para>The world constantly changes. The planning facts used to create a solution, might change before or during the
    execution of that solution. There are 3 types of situations:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Unforeseen fact changes</emphasis>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <emphasis role="bold">backup planning</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Unknown long term future facts</emphasis>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <emphasis role="bold">continuous planning</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Constantly changing planning facts</emphasis>: Use <emphasis role="bold">real-time
        planning</emphasis>.</para>
      </listitem>
    </itemizedlist>

    <para>Waiting to start planning - to lower the risk of planning facts changing - usually isn't a good way to deal
    with that. More CPU time means a better planning solution. A incomplete plan is better then no plan.</para>

    <para>Luckily, the Drools Planner algorithms support planning a solution that's already (partially) planned, known
    as repeated planning.</para>
  </section>

  <section>
    <title>Backup planning</title>

    <para>Backup planning is the technique of adding extra score constraints to create space in the planning for when
    things go wrong. Create a backup plan in the plan. For example: try to assign an employee as the spare employee
    (1 for every 10 shifts at the same time), keep 1 hospital bed open in each department, ...</para>

    <para>Then, when things go wrong (one of the employees calls in sick), change the planning facts on the original
    solution (delete the sick employee leave his/her shifts unassigned) and just restart the planning, starting from
    that solution, which has a different score now. The construction heuristics will fill in the newly created gaps
    (probably with the spare employee) and the metaheuristics will even improve it further.</para>
  </section>

  <section>
    <title>Continuous planning (windowed planning)</title>

    <para>Continuous planning is the technique of planning one or more upcoming planning windows. The first upcoming
    planning window is considered stable (unlikely to change), while later upcoming planning windows are considered
    draft (likely to change during the next planning effort). Distant future planning windows are not planned at
    all.</para>

    <para>Past planning windows have locked planning entities: the planning entities can no longer be changed (they are
    locked in place), but some of them are still needed in the working memory, as they might affect some of the score
    constraints that apply on the upcoming planning entities. For example: when an employee should not work more than 5
    days in a row, he shouldn't work today and tomorrow if he worked the past 4 days already.</para>

    <para>Sometimes some planning entities are semi-locked: they can be changed, but occur a certain score penalty if
    they differ from their original place. For example: avoid rescheduling hospital beds less than 2 days before the
    patient arrives (unless it's really worth it), avoid changing the airplane gate (or worse, the terminal) during the
    2 hours before boarding, ...</para>

    <figure>
      <title>Continuous planning diagram</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Repeated_planning/continuousPlanningPatientAdmissionSchedule.png"
                     format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title>Real-time planning (event based planning)</title>

    <para>To do real-time planning, first combine backup planning and continuous planning with short planning windows
    to lower the burden of real-time planning.</para>

    <para>While the planner is running, an outside event might want to change one of the planning facts, for example
    an airplane is delayed and needs the runway at a later time. Do not change the planning fact instances used by the
    planner while the planner is running. Instead, just terminate the planner early, then change its planning fact
    instances and restart the planner again.</para>
  </section>
</chapter>
