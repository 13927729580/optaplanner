<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Benchmarking and tweaking</title>

  <section>
    <title>Finding the best configuration</title>

    <para>Drools Planner supports several solver types, but you're probably wondering which is the best one? Although
    some solver types generally perform better then others, it really depends on your problem domain. Most solver types
    also have settings which can be tweaked. Those settings can influence the results of a solver a lot, although most
    settings perform pretty good out-of-the-box.</para>

    <para>Luckily, Drools Planner includes a benchmarker, which allows you to play out different solver types and
    different settings against each other, so you can pick the best configuration for your problem domain.</para>
  </section>

  <section>
    <title>Building a Benchmarker</title>

    <para>You can build a <literal>Benchmarker</literal> instance with the<literal>XmlSolverBenchmarker</literal>.
    Configure it with a benchmarker configuration xml file:</para>

    <programlisting language="java">    XmlSolverBenchmarker benchmarker = new XmlSolverBenchmarker();
    benchmarker.configure("/org/drools/planner/examples/nqueens/benchmark/nqueensSolverBenchmarkConfig.xml");
    benchmarker.benchmark();
    benchmarker.writeResults(resultFile);</programlisting>

    <para>A basic benchmarker configuration file looks something like this:</para>

    <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;solverBenchmarkSuite&gt;
    &lt;benchmarkDirectory&gt;local/data/nqueens&lt;/benchmarkDirectory&gt;

    &lt;inheritedSolverBenchmark&gt;
        &lt;unsolvedSolutionFile&gt;data/nqueens/unsolved/unsolvedNQueens32.xml&lt;/unsolvedSolutionFile&gt;
        &lt;unsolvedSolutionFile&gt;data/nqueens/unsolved/unsolvedNQueens64.xml&lt;/unsolvedSolutionFile&gt;
        &lt;localSearchSolver&gt;
            &lt;scoreDrl&gt;/org/drools/planner/examples/nqueens/solver/nQueensScoreRules.drl&lt;/scoreDrl&gt;
            &lt;scoreDefinition&gt;
                &lt;scoreDefinitionType&gt;SIMPLE&lt;/scoreDefinitionType&gt;
            &lt;/scoreDefinition&gt;
            &lt;termination&gt;
                &lt;maximumSecondsSpend&gt;20&lt;/maximumSecondsSpend&gt;
            &lt;/termination&gt;
            &lt;selector&gt;
                &lt;moveFactoryClass&gt;org.drools.planner.examples.nqueens.solver.move.factory.NQueensMoveFactory&lt;/moveFactoryClass&gt;
            &lt;/selector&gt;
            &lt;forager&gt;
                &lt;pickEarlyType&gt;NEVER&lt;/pickEarlyType&gt;
            &lt;/forager&gt;
        &lt;/localSearchSolver&gt;
    &lt;/inheritedSolverBenchmark&gt;

    &lt;solverBenchmark&gt;
        &lt;name&gt;Solution tabu&lt;/name&gt;
        &lt;localSearchSolver&gt;
            &lt;acceptor&gt;
            &lt;completeSolutionTabuSize&gt;1000&lt;/completeSolutionTabuSize&gt;
            &lt;/acceptor&gt;
        &lt;/localSearchSolver&gt;
    &lt;/solverBenchmark&gt;
    &lt;solverBenchmark&gt;
        &lt;name&gt;Move tabu 5&lt;/name&gt;
        &lt;localSearchSolver&gt;
            &lt;acceptor&gt;
            &lt;completeMoveTabuSize&gt;5&lt;/completeMoveTabuSize&gt;
            &lt;/acceptor&gt;
        &lt;/localSearchSolver&gt;
    &lt;/solverBenchmark&gt;
    &lt;solverBenchmark&gt;
        &lt;name&gt;Move tabu 7&lt;/name&gt;
        &lt;localSearchSolver&gt;
            &lt;acceptor&gt;
            &lt;completeMoveTabuSize&gt;7&lt;/completeMoveTabuSize&gt;
            &lt;/acceptor&gt;
        &lt;/localSearchSolver&gt;
    &lt;/solverBenchmark&gt;
    &lt;solverBenchmark&gt;
        &lt;name&gt;Solution tabu and move tabu 7&lt;/name&gt;
        &lt;localSearchSolver&gt;
            &lt;acceptor&gt;
            &lt;completeSolutionTabuSize&gt;1000&lt;/completeSolutionTabuSize&gt;
            &lt;completeMoveTabuSize&gt;7&lt;/completeMoveTabuSize&gt;
            &lt;/acceptor&gt;
        &lt;/localSearchSolver&gt;
    &lt;/solverBenchmark&gt;
&lt;/solverBenchmarkSuite&gt;</programlisting>

    <para>This benchmarker will try 4 configurations (1 solution tabu, 2 move tabu's and 1 solution-move tabu) on 2 data
    sets (32 and 64 queens), so it will run 8 solvers.</para>

    <para>Every <literal>solverBenchmark</literal> entity contains a solver configuration (for example a local search
    solver) and one or more <literal>unsolvedSolutionFile</literal> entities. It will run the solver configuration on
    each of those unsolved solution files. A <literal>name</literal> is optional and generated if absent. The common
    part of multiple <literal>solverBenchmark</literal> entities can be extracted to the
    <literal>inheritedSolverBenchmark</literal> entity, but they can still be overwritten per
    <literal>solverBenchmark</literal> entity.</para>

    <para>You need to specify a <literal>benchmarkDirectory</literal> (relative to the working directory). A summary
    statistic and the best solution of each solver run will be written in that directory. Here is an example of a
    summary statistic:</para>

    <figure>
      <title>Summary statistic</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Benchmarking_and_tweaking/summaryStatistic.png" format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title>Statistics (graph and CSV)</title>

    <para>The benchmarker supports outputting statistics as graphs and CSV (comma separated values) files to the
    <literal>benchmarkDirectory</literal>.</para>

    <para>To configure graph and CSV output of a statistic, just add a <literal>solverStatisticType</literal>
    line:</para>

    <programlisting language="xml">&lt;solverBenchmarkSuite&gt;
    &lt;benchmarkDirectory&gt;local/data/nqueens/solved&lt;/benchmarkDirectory&gt;
    &lt;solverStatisticType&gt;BEST_SOLUTION_CHANGED&lt;/solverStatisticType&gt;
    ...
&lt;/solverBenchmarkSuite&gt;</programlisting>

    <para>Multiple <literal>solverStatisticType</literal> entries are allowed. Some statistic types might influence
    performance noticeably. The following types are are supported:</para>

    <section>
      <title>Best score over time statistic (graph and CSV)</title>

      <para>To see how the best score evolves over time, add <literal>BEST_SOLUTION_CHANGED</literal> as <literal>a
      solverStatisticType</literal>.</para>

      <figure>
        <title>Best score over time statistic</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Chapter-Benchmarking_and_tweaking/bestSolutionChangedStatistic.png" format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <note>
        <para>Don't be fooled by the simulated annealing line in this graph. If you give simulated annealing only 5
        minutes, it might still be better than 5 minutes of tabu search. That's because this simulated annealing
        implementation automatically determines it's velocity based on the amount of time that can be spend. On the
        other hand, for the tabu search, what you see is what you'd get.</para>
      </note>
    </section>

    <section>
      <title>Calculate count per second statistic (graph and CSV)</title>

      <para>To see how fast the scores are calculated, add <literal>CALCULATE_COUNT_PER_SECOND</literal> as a
      <literal>solverStatisticType</literal>.</para>

      <figure>
        <title>Calculate count per second statistic</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Chapter-Benchmarking_and_tweaking/calculateCountPerSecondStatistic.png"
                       format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <note>
        <para>The initial high calculate count is typical during solution initialization. In this example, it's far
        easier to calculate the score of a solution if only a handful exams have been added, in contrast to all of them.
        After those few seconds of initialization, the calculate count is relatively stable, apart from an occasional
        stop-the-world garbage collector disruption.</para>
      </note>
    </section>

    <section>
      <title>Memory use statistic (graph and CSV)</title>

      <para>To see how much memory is used, add <literal>MEMORY_USE</literal> as <literal>a
      solverStatisticType</literal>.</para>

      <figure>
        <title>Memory use statistic</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Chapter-Benchmarking_and_tweaking/memoryUseStatistic.png" format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>
</chapter>
