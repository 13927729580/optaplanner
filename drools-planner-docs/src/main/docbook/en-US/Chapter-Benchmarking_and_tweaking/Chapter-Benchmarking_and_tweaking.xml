<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="benchmarkingAndTweaking" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Benchmarking and tweaking</title>

  <section>
    <title>Finding the best configuration</title>

    <para>Drools Planner supports several optimization algorithms (as solver phases), but you're probably wondering
    which is the best one? Although some optimization algorithms generally perform better than others, it really depends
    on your problem domain. Most solver phases have settings which can be tweaked. Those settings can influence the
    results a lot, although most solver phases work pretty well out-of-the-box.</para>

    <para>Luckily, Drools Planner includes a benchmarker, which allows you to play out different solver phases with
    different settings against each other, so you can pick the best configuration for your planning problem.</para>
  </section>

  <section>
    <title>Doing a benchmark</title>

    <section>
      <title>Adding the extra dependency</title>

      <para>The benchmarker is in a separate artifact called <literal>drools-planner-benchmark</literal>.</para>

      <para>If you use maven, add a dependency in your <filename>pom.xml</filename> file:</para>

      <programlisting language="xml">    &lt;dependency&gt;
      &lt;groupId&gt;org.drools.planner&lt;/groupId&gt;
      &lt;artifactId&gt;drools-planner-benchmark&lt;/artifactId&gt;
      &lt;version&gt;...&lt;/version&gt;
    &lt;/dependency&gt;</programlisting>

      <para>This is similar for gradle, ivy and buildr. The version must be exactly the same as the
      <literal>drools-planner-core</literal> version used.</para>

      <para>If you use ANT, you've probably already copied the required jars from the download zip's
      <filename>binaries</filename> directory.</para>
    </section>

    <section>
      <title>Building and running a <literal>PlannerBenchmark</literal></title>

      <para>You can build a <literal>PlannerBenchmark</literal> instance with the
      <literal>XmlPlannerBenchmarkFactory</literal>. Configure it with a benchmark configuration xml file:</para>

      <programlisting language="java">    XmlPlannerBenchmarkFactory plannerBenchmarkFactory = new XmlPlannerBenchmarkFactory();
    plannerBenchmarkFactory.configure("/org/drools/planner/examples/nqueens/benchmark/nqueensBenchmarkConfig.xml");
    PlannerBenchmark plannerBenchmark = benchmarkFactory.buildPlannerBenchmark();
    plannerBenchmark.benchmark();</programlisting>

      <para>A basic benchmark configuration file looks something like this:</para>

      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;plannerBenchmark&gt;
  &lt;benchmarkDirectory&gt;local/data/nqueens&lt;/benchmarkDirectory&gt;
  &lt;!--&lt;parallelBenchmarkCount&gt;AUTO&lt;/parallelBenchmarkCount&gt;--&gt;
  &lt;warmUpSecondsSpend&gt;30&lt;/warmUpSecondsSpend&gt;

  &lt;inheritedSolverBenchmark&gt;
    &lt;problemBenchmarks&gt;
      &lt;xstreamAnnotatedClass&gt;org.drools.planner.examples.nqueens.domain.NQueens&lt;/xstreamAnnotatedClass&gt;
      &lt;inputSolutionFile&gt;data/nqueens/unsolved/unsolvedNQueens32.xml&lt;/inputSolutionFile&gt;
      &lt;inputSolutionFile&gt;data/nqueens/unsolved/unsolvedNQueens64.xml&lt;/inputSolutionFile&gt;
      &lt;problemStatisticType&gt;BEST_SOLUTION_CHANGED&lt;/problemStatisticType&gt;
    &lt;/problemBenchmarks&gt;
    &lt;solver&gt;
      &lt;solutionClass&gt;org.drools.planner.examples.nqueens.domain.NQueens&lt;/solutionClass&gt;
      &lt;planningEntityClass&gt;org.drools.planner.examples.nqueens.domain.Queen&lt;/planningEntityClass&gt;
      &lt;scoreDirectorFactory&gt;
        &lt;scoreDefinitionType&gt;SIMPLE&lt;/scoreDefinitionType&gt;
        &lt;scoreDrl&gt;/org/drools/planner/examples/nqueens/solver/nQueensScoreRules.drl&lt;/scoreDrl&gt;
      &lt;/scoreDirectorFactory&gt;
      &lt;termination&gt;
        &lt;maximumSecondsSpend&gt;20&lt;/maximumSecondsSpend&gt;
      &lt;/termination&gt;
      &lt;constructionHeuristic&gt;
        &lt;constructionHeuristicType&gt;FIRST_FIT_DECREASING&lt;/constructionHeuristicType&gt;
        &lt;constructionHeuristicPickEarlyType&gt;FIRST_LAST_STEP_SCORE_EQUAL_OR_IMPROVING&lt;/constructionHeuristicPickEarlyType&gt;
      &lt;/constructionHeuristic&gt;
    &lt;/solver&gt;
  &lt;/inheritedSolverBenchmark&gt;

  &lt;solverBenchmark&gt;
    &lt;name&gt;Move tabu&lt;/name&gt;
    &lt;solver&gt;
      &lt;localSearch&gt;
        &lt;selector&gt;
          &lt;moveFactoryClass&gt;org.drools.planner.examples.nqueens.solver.move.factory.RowChangeMoveFactory&lt;/moveFactoryClass&gt;
        &lt;/selector&gt;
        &lt;acceptor&gt;
          &lt;moveTabuSize&gt;5&lt;/moveTabuSize&gt;
        &lt;/acceptor&gt;
        &lt;forager&gt;
          &lt;pickEarlyType&gt;NEVER&lt;/pickEarlyType&gt;
        &lt;/forager&gt;
      &lt;/localSearch&gt;
    &lt;/solver&gt;
  &lt;/solverBenchmark&gt;
  &lt;solverBenchmark&gt;
    &lt;name&gt;Entity tabu&lt;/name&gt;
    &lt;solver&gt;
      &lt;localSearch&gt;
        &lt;selector&gt;
          &lt;moveFactoryClass&gt;org.drools.planner.examples.nqueens.solver.move.factory.RowChangeMoveFactory&lt;/moveFactoryClass&gt;
        &lt;/selector&gt;
        &lt;acceptor&gt;
          &lt;planningEntityTabuSize&gt;5&lt;/planningEntityTabuSize&gt;
        &lt;/acceptor&gt;
        &lt;forager&gt;
          &lt;pickEarlyType&gt;NEVER&lt;/pickEarlyType&gt;
        &lt;/forager&gt;
      &lt;/localSearch&gt;
    &lt;/solver&gt;
  &lt;/solverBenchmark&gt;
  &lt;solverBenchmark&gt;
    &lt;name&gt;Value tabu&lt;/name&gt;
    &lt;solver&gt;
      &lt;localSearch&gt;
        &lt;selector&gt;
          &lt;moveFactoryClass&gt;org.drools.planner.examples.nqueens.solver.move.factory.RowChangeMoveFactory&lt;/moveFactoryClass&gt;
        &lt;/selector&gt;
        &lt;acceptor&gt;
          &lt;planningValueTabuSize&gt;5&lt;/planningValueTabuSize&gt;
        &lt;/acceptor&gt;
        &lt;forager&gt;
          &lt;pickEarlyType&gt;NEVER&lt;/pickEarlyType&gt;
        &lt;/forager&gt;
      &lt;/localSearch&gt;
    &lt;/solver&gt;
  &lt;/solverBenchmark&gt;
&lt;/plannerBenchmark&gt;</programlisting>

      <para>This <literal>PlannerBenchmark</literal> will try 3 configurations (1 move tabu, 1 entity tabu and 1 value
      tabu) on 2 data sets (32 and 64 queens), so it will run 6 solvers.</para>

      <para>Every <literal>solverBenchmark</literal> element contains a solver configuration (for example with a local
      search solver phase) and one or more <literal>inputSolutionFile</literal> elements. It will run the solver
      configuration on each of those unsolved solution files. A <literal>name</literal> is optional and generated if
      absent.</para>

      <para>To lower verbosity, the common part of multiple <literal>solverBenchmark</literal> entities can be extracted
      to the <literal>inheritedSolverBenchmark</literal> element. Yet, every element can still be overwritten per
      <literal>solverBenchmark</literal> element. Note that inherited solver phases such as
      <literal>&lt;constructionHeuristic&gt;</literal> or <literal>&lt;localSearch&gt;</literal> are not overwritten but
      instead are added to the tail of the solver phases list.</para>

      <para>You need to specify a <literal>benchmarkDirectory</literal> (relative to the working directory). The best
      solution of each <literal>Solver</literal> run and a handy overview report will be written in that
      directory.</para>

      <note>
        <para>It's recommended that the <literal>benchmarkDirectory</literal> is a directory not committed to source
        control and not cleaned by your build system. This way the generated files are not bloating your source control
        and they aren't lost when doing a build. Usually that directory is called <literal>local</literal>.</para>
      </note>
    </section>

    <section>
      <title>ProblemIO: input and output of Solution files</title>

      <section>
        <title><literal>ProblemIO</literal> interface</title>

        <para>The benchmarker needs to be able to read the input files to contain a <literal>Solution</literal> write
        the best <literal>Solution</literal> of each benchmark to an output file. For that it uses a class that
        implements the <literal>ProblemIO</literal> interface:</para>

        <programlisting language="java">public interface ProblemIO {

    String getFileExtension();

    Solution read(File inputSolutionFile);

    void write(Solution solution, File outputSolutionFile);

}</programlisting>
      </section>

      <section>
        <title><literal>XStreamProblemIO</literal></title>

        <para>By default, a <literal>XStreamProblemIO</literal> instance is used and you just need to configure your
        <literal>Solution</literal> class as being annotated with XStream:</para>

        <programlisting language="xml">    &lt;problemBenchmarks&gt;
      &lt;xstreamAnnotatedClass&gt;org.drools.planner.examples.nqueens.domain.NQueens&lt;/xstreamAnnotatedClass&gt;
      &lt;inputSolutionFile&gt;data/nqueens/unsolved/unsolvedNQueens32.xml&lt;/inputSolutionFile&gt;
      ...
    &lt;/problemBenchmarks&gt;</programlisting>

        <para>However, your input files need to have been written with a <literal>XStreamProblemIO</literal>
        instance.</para>
      </section>

      <section>
        <title>Custom <literal>ProblemIO</literal></title>

        <para>Alternatively, you can implement your own <literal>ProblemIO</literal> implementation and configure it
        with the <literal>problemIOClass</literal> element:</para>

        <programlisting language="xml">    &lt;problemBenchmarks&gt;
      &lt;problemIOClass&gt;org.drools.planner.examples.machinereassignment.persistence.MachineReassignmentProblemIO&lt;/problemIOClass&gt;
      &lt;inputSolutionFile&gt;data/machinereassignment/input/model_a1_1.txt&lt;/inputSolutionFile&gt;
      ...
    &lt;/problemBenchmarks&gt;</programlisting>

        <warning>
          <para>A <literal>ProblemIO</literal> implementation must be thread-safe.</para>
        </warning>
      </section>
    </section>

    <section>
      <title>Warming up the HotSpot compiler</title>

      <para><emphasis role="bold">Without a warm up, the results of the first (or first few) benchmarks are not
      reliable</emphasis>, because they will have lost CPU time on HotSpot JIT compilation (and possibly DRL compilation
      too).</para>

      <para>The avoid that distortion, the benchmarker can run some of the benchmarks for a specified amount of time,
      before running the real benchmarks. Generally, a warm up of 30 seconds suffices:</para>

      <programlisting language="xml">&lt;plannerBenchmark&gt;
  ...
  &lt;warmUpSecondsSpend&gt;30&lt;/warmUpSecondsSpend&gt;
  ...
&lt;/plannerBenchmark&gt;</programlisting>
    </section>
  </section>

  <section>
    <title>Benchmark report</title>

    <section>
      <title>HTML report</title>

      <para>After the running a benchmark, a HTML report will be written in the <literal>benchmarkDirectory</literal>
      with the filename <filename>index.html</filename>. Open it in your browser. It has a nice overview of your
      benchmark including:</para>

      <itemizedlist>
        <listitem>
          <para>Summary statistics: graphs and tables</para>
        </listitem>

        <listitem>
          <para>Problem statistics per <literal>inputSolutionFile</literal></para>
        </listitem>

        <listitem>
          <para>Each solver configuration (ranked): easy to copy and paste.</para>
        </listitem>

        <listitem>
          <para>Benchmark information</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Summary statistics</title>

      <section>
        <title>Best score summary</title>

        <para>Shows the best score per <literal>inputSolutionFile</literal> and solver configuration.</para>

        <figure>
          <title>Best score summary statistic</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/Chapter-Benchmarking_and_tweaking/summaryStatistic.png" format="PNG"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
    </section>

    <section>
      <title>Statistic per data set (graph and CSV)</title>

      <section>
        <title>Enabling a problem statistic</title>

        <para>The benchmarker supports outputting problem statistics as graphs and CSV (comma separated values) files to
        the <literal>benchmarkDirectory</literal>.</para>

        <para>To configure graph and CSV output of a statistic, just add a <literal>problemStatisticType</literal>
        line:</para>

        <programlisting language="xml">&lt;plannerBenchmark&gt;
  &lt;benchmarkDirectory&gt;local/data/nqueens/solved&lt;/benchmarkDirectory&gt;
  &lt;inheritedSolverBenchmark&gt;
    &lt;problemBenchmarks&gt;
      ...
      &lt;problemStatisticType&gt;BEST_SOLUTION_CHANGED&lt;/problemStatisticType&gt;
      &lt;problemStatisticType&gt;CALCULATE_COUNT_PER_SECOND&lt;/problemStatisticType&gt;
    &lt;/problemBenchmarks&gt;
    ...
  &lt;/inheritedSolverBenchmark&gt;
  ...
&lt;/plannerBenchmark&gt;</programlisting>

        <para>Multiple <literal>problemStatisticType</literal> elements are allowed. Some statistic types might
        influence performance and benchmark results noticeably. The following types are supported:</para>
      </section>

      <section>
        <title>Best score over time statistic (graph and CSV)</title>

        <para>To see how the best score evolves over time, add <literal>BEST_SOLUTION_CHANGED</literal> as <literal>a
        problemStatisticType</literal>.</para>

        <figure>
          <title>Best score over time statistic</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/Chapter-Benchmarking_and_tweaking/bestSolutionChangedStatistic.png"
                         format="PNG"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para><emphasis role="bold">The best score over time statistic is very useful to detect abnormalities, such as
        score traps.</emphasis></para>

        <note>
          <para>Don't be fooled by the simulated annealing line in this graph. If you give simulated annealing only 5
          minutes, it might still be better than 5 minutes of tabu search. That's because this simulated annealing
          implementation automatically determines its velocity based on the amount of time that can be spend. On the
          other hand, for the tabu search, what you see is what you'd get.</para>
        </note>
      </section>

      <section>
        <title>Calculate count per second statistic (graph and CSV)</title>

        <para>To see how fast the scores are calculated, add <literal>CALCULATE_COUNT_PER_SECOND</literal> as a
        <literal>problemStatisticType</literal>.</para>

        <figure>
          <title>Calculate count per second statistic</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/Chapter-Benchmarking_and_tweaking/calculateCountPerSecondStatistic.png"
                         format="PNG"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <note>
          <para>The initial high calculate count is typical during solution initialization. In this example, it's far
          easier to calculate the score of a solution if only a handful exams have been added, in contrast to all of
          them. After those few seconds of initialization, the calculate count is relatively stable, apart from an
          occasional stop-the-world garbage collector disruption.</para>
        </note>
      </section>

      <section>
        <title>Memory use statistic (graph and CSV)</title>

        <para>To see how much memory is used, add <literal>MEMORY_USE</literal> as <literal>a
        problemStatisticType</literal>.</para>

        <figure>
          <title>Memory use statistic</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/Chapter-Benchmarking_and_tweaking/memoryUseStatistic.png" format="PNG"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
    </section>

    <section>
      <title>Ranking the <literal>Solver</literal>s</title>

      <para>The benchmark report automatically ranks the solvers. It's recommended to use the winning
      <literal>Solver</literal> (which has rank 0) in production.</para>

      <para>However, there are different ways of ranking the solvers. You can configure how:</para>

      <programlisting language="xml">&lt;plannerBenchmark&gt;
  ...
  &lt;solverBenchmarkRankingType&gt;TOTAL_SCORE&lt;/solverBenchmarkRankingType&gt;
  ...
&lt;/plannerBenchmark&gt;</programlisting>

      <para>The following <literal>solverBenchmarkRankingType</literal>s are supported:</para>

      <itemizedlist>
        <listitem>
          <para><literal>TOTAL_SCORE</literal>: Maximize the overall score, so minimize the overall cost if all
          solutions would be executed. This is the default.</para>
        </listitem>

        <listitem>
          <para><literal>WORST_SCORE</literal>: Minimize the worst case scenario.</para>
        </listitem>

        <listitem>
          <para><literal>TOTAL_RANKING</literal>: Maximize the overall ranking. Use this if your datasets differ greatly
          in size or difficulty, producing a difference in <literal>Score</literal> magnitude.</para>
        </listitem>
      </itemizedlist>

      <para>You can also use a custom ranking, by implementing a <literal>Comparator</literal>:</para>

      <programlisting language="xml">  &lt;solverBenchmarkRankingComparatorClass&gt;...TotalScoreSolverBenchmarkRankingComparator&lt;/solverBenchmarkRankingComparatorClass&gt;</programlisting>

      <para>Or a weight factory:</para>

      <programlisting language="xml">  &lt;solverBenchmarkRankingWeightFactoryClass&gt;...TotalRankSolverBenchmarkRankingWeightFactory&lt;/solverBenchmarkRankingWeightFactoryClass&gt;</programlisting>
    </section>
  </section>

  <section>
    <title>Advanced benchmarking</title>

    <section>
      <title>Parallel benchmarking on multiple threads</title>

      <para>If you have multiple processors available on your computer, you can run multiple benchmarks in parallel on
      multiple threads to get your benchmarks results faster:</para>

      <programlisting language="xml">&lt;plannerBenchmark&gt;
  ...
  &lt;parallelBenchmarkCount&gt;AUTO&lt;/parallelBenchmarkCount&gt;
  ...
&lt;/plannerBenchmark&gt;</programlisting>

      <warning>
        <para>Running too many benchmarks in parallel will affect the results of benchmarks negatively. Leave some
        processors unused for garbage collection and other processes.</para>

        <para>We tweak <literal>parallelBenchmarkCount</literal> <literal>AUTO</literal> to maximize the reliability and
        efficiency of the benchmark results.</para>
      </warning>

      <para>The following <literal>parallelBenchmarkCount</literal>s are supported:</para>

      <itemizedlist>
        <listitem>
          <para><literal>1</literal>: Run all benchmarks sequentially. This is the default setting.</para>
        </listitem>

        <listitem>
          <para><literal>AUTO</literal>: Let Planner decide how many benchmarks to run in parallel. This formula is
          based on experience. It's recommended to prefer this over the other parallel enabling options.</para>
        </listitem>

        <listitem>
          <para>Static number: The number of benchmarks to run in parallel.</para>

          <programlisting language="xml">&lt;parallelBenchmarkCount&gt;2&lt;/parallelBenchmarkCount&gt;</programlisting>
        </listitem>

        <listitem>
          <para>JavaScript formula: Formula for the number of benchmarks to run in parallel. It can use the variable
          <literal>availableProcessorCount</literal>. For example:</para>

          <programlisting language="xml">&lt;parallelBenchmarkCount&gt;(availableProcessorCount / 2) + 1&lt;/parallelBenchmarkCount&gt;</programlisting>
        </listitem>
      </itemizedlist>

      <note>
        <para>The <literal>parallelBenchmarkCount</literal> is always limited to the number of available processors. If
        it's higher, it will be automatically decreased.</para>
      </note>

      <note>
        <para>In the future, we will also support multi-JVM benchmarking. This feature is independent of <link
        xlink:href="https://issues.jboss.org/browse/JBRULES-681">multi-threaded solving</link> or multi-JVM
        solving.</para>
      </note>
    </section>

    <section>
      <title>Template based benchmarking and matrix benchmarking</title>

      <para>Matrix benchmarking is benchmarking a combination of value sets. For example: benchmark 4
      <literal>planningEntityTabuSize</literal> values (<literal>5</literal>, <literal>7</literal>,
      <literal>11</literal> and <literal>13</literal>) combined with 3 <literal>minimalAcceptedSelection</literal>
      values (<literal>500</literal>, <literal>1000</literal> and <literal>2000</literal>), resulting in 12 solver
      configurations.</para>

      <para>To reduce the verbosity of such a benchmark configuration, you can use a <link
      xlink:href="http://freemarker.sourceforge.net/">Freemarker</link> template for the benchmark configuration
      instead:</para>

      <programlisting language="xml">&lt;plannerBenchmark&gt;
  ...

  &lt;inheritedSolverBenchmark&gt;
    ...
  &lt;/inheritedSolverBenchmark&gt;

&lt;#list [5, 7, 11, 13] as planningEntityTabuSize&gt;
&lt;#list [500, 1000, 2000] as minimalAcceptedSelection&gt;
  &lt;solverBenchmark&gt;
    &lt;name&gt;entityTabu ${planningEntityTabuSize} acceptedSelection ${minimalAcceptedSelection}&lt;/name&gt;
    &lt;solver&gt;
      &lt;localSearch&gt;
        &lt;selector&gt;
          &lt;selector&gt;
            &lt;moveFactoryClass&gt;org.drools.planner.examples.cloudbalancing.solver.move.factory.CloudComputerChangeMoveFactory&lt;/moveFactoryClass&gt;
          &lt;/selector&gt;
          &lt;selector&gt;
            &lt;moveFactoryClass&gt;org.drools.planner.examples.cloudbalancing.solver.move.factory.CloudProcessSwapMoveFactory&lt;/moveFactoryClass&gt;
          &lt;/selector&gt;
        &lt;/selector&gt;
        &lt;acceptor&gt;
          &lt;planningEntityTabuSize&gt;${planningEntityTabuSize}&lt;/planningEntityTabuSize&gt;
        &lt;/acceptor&gt;
        &lt;forager&gt;
          &lt;minimalAcceptedSelection&gt;${minimalAcceptedSelection}&lt;/minimalAcceptedSelection&gt;
        &lt;/forager&gt;
      &lt;/localSearch&gt;
    &lt;/solver&gt;
  &lt;/solverBenchmark&gt;
&lt;/#list&gt;
&lt;/#list&gt;
&lt;/plannerBenchmark&gt;</programlisting>

      <para>And configure it with the method <literal>configureFromTemplate</literal>:</para>

      <programlisting language="java">    XmlPlannerBenchmarkFactory plannerBenchmarkFactory = new XmlPlannerBenchmarkFactory();
    plannerBenchmarkFactory.configureFromTemplate("/org/drools/planner/examples/cloudbalancing/benchmark/cloudBalancingBenchmarkConfigTemplate.xml.ftl");
    PlannerBenchmark plannerBenchmark = benchmarkFactory.buildPlannerBenchmark();</programlisting>
    </section>
  </section>
</chapter>
