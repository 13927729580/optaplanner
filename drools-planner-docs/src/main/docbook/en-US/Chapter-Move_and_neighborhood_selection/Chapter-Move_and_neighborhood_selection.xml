<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="moveAndNeighborhoodSelection" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title><literal>Move</literal> and neighborhood selection</title>

  <section>
    <title><literal>Move</literal> and neighborhood introduction</title>

    <section>
      <title>What is a <literal>Move</literal>?</title>

      <para>A <literal>Move</literal> is a change (or set of changes) from a solution A to a solution B. For example,
      the move below changes queen <literal>C</literal> from row <literal>0</literal> to row
      <literal>2</literal>:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Move_and_neighborhood_selection/singleMoveNQueens04.png"></imagedata>
        </imageobject>
      </mediaobject>

      <para>The new solution is called a <emphasis>neighbor</emphasis> of the original solution, because it can be
      reached in a single <literal>Move</literal>. Although a single move can change multiple queens, the neighbors of a
      solution should always be a very small subset of all possible solutions. For example, on that original solution,
      these are all possible <literal>changeMove</literal>'s:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Move_and_neighborhood_selection/possibleMovesNQueens04.png"></imagedata>
        </imageobject>
      </mediaobject>

      <para>If we ignore the 4 <literal>changeMove</literal>'s that have not impact and are therefore not doable, we can
      see that number of moves is <literal>n * (n - 1) = 12</literal>. This is far less than the number of possible
      solutions, which is <literal>n ^ n = 256</literal>. As the problem scales out, the number of possible moves
      increases far less than the number of possible solutions.</para>

      <para>Yet, in 4 <literal>changeMove</literal>'s or less we can reach any solution. For example we can reach a very
      different solution in 3 <literal>changeMove</literal>'s:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Move_and_neighborhood_selection/sequentialMovesNQueens04.png"></imagedata>
        </imageobject>
      </mediaobject>

      <note>
        <para>There are many other types of moves besides <literal>changeMove</literal>'s. Some moves affect multiple
        entities or even create/delete entities. For a complete list, see the rest of this chapter.</para>
      </note>

      <para>All optimization algorithms use <literal>Move</literal>'s to transition from one solution to a neighbor
      solution. Therefor, all the optimization algorithms are confronted with <literal>Move</literal> selection: the
      craft of creating and iterating moves efficiently and the art of finding the most promising subset of random moves
      to evaluate first.</para>
    </section>

    <section>
      <title>Configuring a <literal>MoveSelector</literal></title>

      <para>Here's an example how to configure a <literal>changeMoveSelector</literal> for Local Search:</para>

      <programlisting language="xml">  &lt;localSearch&gt;
    &lt;changeMoveSelector/&gt;
    ...
  &lt;/localSearch&gt;</programlisting>

      <para>Out of the box, this works and all properties are defaulted (unless it fails fast due to ambiguity). But if
      you so desire, you can customize the configuration significantly.</para>
    </section>

    <section>
      <title>Subselecting of entities, values and other moves</title>

      <para>To create a <literal>Move</literal>, we need to select 1 or more planning entities and/or planning values to
      move. Just like <literal>MoveSelector</literal>s, <literal>EntitySelector</literal>s and
      <literal>ValueSelector</literal>s need to support a similar feature set (such as scalable just-in-time selection).
      Therefor, they implement a common interface <literal>Selector</literal> and they are configured similarly.</para>

      <para>A MoveSelector is often composed out of <literal>EntitySelector</literal>s,
      <literal>ValueSelector</literal>s or even <literal>MoveSelector</literal>s, which you can configure if so desired:
      </para>

      <programlisting language="xml">    &lt;changeMoveSelector&gt;
      &lt;entitySelectorConfig&gt;
        &lt;planningEntityClass&gt;...Lecture&lt;/planningEntityClass&gt;
        ...
      &lt;/entitySelectorConfig&gt;
      &lt;valueSelector&gt;
        &lt;planningVariableName&gt;period&lt;/planningVariableName&gt;
        ...
      &lt;/valueSelector&gt;
      ...
    &lt;/changeMoveSelector&gt;</programlisting>

      <para>Together, this structure forms a <literal>Selector</literal> tree.</para>
    </section>
  </section>

  <section>
    <title>General <literal>Selector</literal> features</title>

    <section>
      <title>Selection order: random, original or sorted</title>

      <para>TODO</para>
    </section>

    <section>
      <title>Caching or Just In Time selection</title>

      <para>TODO</para>
    </section>

    <section>
      <title>Filtered selection</title>

      <para>TODO</para>
    </section>

    <section>
      <title>Probability selection</title>

      <para>TODO</para>
    </section>
  </section>

  <section>
    <title>Generic MoveSelectors</title>

    <section>
      <title><literal>changeMoveSelector</literal></title>

      <para>TODO</para>
    </section>

    <section>
      <title>swapMoveSelector</title>

      <para>TODO</para>
    </section>

    <section>
      <title>pillarSwapMoveSelector</title>

      <para>TODO</para>
    </section>

    <section>
      <title>subChainChangeMoveSelector</title>

      <para>TODO</para>
    </section>

    <section>
      <title>subChainSwapMoveSelector</title>

      <para>TODO</para>
    </section>
  </section>

  <section>
    <title>Combining multiple <literal>MoveSelector</literal>s</title>

    <section>
      <title>unionMoveSelector</title>

      <para>TODO</para>
    </section>

    <section>
      <title>cartesianProductMoveSelector</title>

      <para>TODO</para>
    </section>
  </section>

  <section>
    <title>Custom <literal>Move</literal>s</title>

    <section>
      <title>The interface <literal>Move</literal></title>

      <para>TODO</para>
    </section>

    <section>
      <title>ggg</title>

      <para>TODO</para>
    </section>

    <section>
      <title>moveListFactory</title>

      <para>TODO</para>
    </section>

    <section>
      <title>moveIteratorFactory</title>

      <para>TODO</para>
    </section>
  </section>

  <section>
    <title>EntitySelector</title>

    <section>
      <title>ggg</title>

      <para>TODO</para>
    </section>

    <section>
      <title>ggg</title>

      <para>TODO</para>
    </section>

    <section>
      <title>ggg</title>

      <para>TODO</para>
    </section>
  </section>

  <section>
    <title>ValueSelector</title>

    <section>
      <title>ggg</title>

      <para>TODO</para>
    </section>

    <section>
      <title>ggg</title>

      <para>TODO</para>
    </section>

    <section>
      <title>ggg</title>

      <para>TODO</para>
    </section>
  </section>

  <section>
    <title>TODO DELETEME Garbage</title>

    <para>TODO</para>

    <para>These are some possibilities for move types in n queens:</para>

    <itemizedlist>
      <listitem>
        <para>Move a single queen to another row. This is a small move. For example, move queen <emphasis>C0 to
        C2</emphasis>.</para>
      </listitem>

      <listitem>
        <para>Move all queens a number of rows down or up. This a big move.</para>
      </listitem>

      <listitem>
        <para>Move a single queen to another column. This is a small move. For example, move queen <emphasis>C2 to
        A0</emphasis> (placing it on top of queen A0).</para>
      </listitem>

      <listitem>
        <para>Add a queen to the board at a certain row and column.</para>
      </listitem>

      <listitem>
        <para>Remove a queen from the board.</para>
      </listitem>
    </itemizedlist>

    <para>Because we have decided that all queens will be on the board at all times and each queen has an appointed
    column (for performance reasons), only the first 2 move types are usable in our example.</para>
  </section>
</chapter>
