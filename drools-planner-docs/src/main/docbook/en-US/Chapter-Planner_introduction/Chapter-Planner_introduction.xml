<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Planner introduction</title>

  <section>
    <title>What is Drools Planner?</title>

    <para><emphasis role="bold"><link xlink:href="http://www.jboss.org/drools/drools-planner">Drools Planner</link>
    optimizes planning problems.</emphasis> It solves use cases, such as:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">Employee shift rostering</emphasis>: rostering nurses, repairmen, ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Agenda scheduling</emphasis>: scheduling meetings, appointments, maintenance jobs,
        advertisements, ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Educational timetabling</emphasis>: scheduling lessons, courses, exams, conference
        presentations, ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Vehicle routing</emphasis>: planning vehicles (trucks, trains, boats, airplanes,
        ...) with freight and/or people</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Bin packing</emphasis>: filling containers, trucks, ships and storage warehouses,
        but also cloud computers nodes, ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Job shop scheduling</emphasis>: planning car assembly lines, machine queue planning,
        workforce task planning, ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Cutting stock</emphasis>: while minimizing waste: cutting paper, steel, carpet,
        ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Sport scheduling</emphasis>: planning football leagues, baseball leagues, ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Financial optimization</emphasis>: investment portfolio optimization, risk
        spreading, ...</para>
      </listitem>
    </itemizedlist>

    <para>Every organization faces planning problems: they have a number of things to do and a limited set of
    <emphasis>constrained</emphasis> resources to do them with.</para>

    <para>Drools Planner enables normal Java<superscript>TM</superscript> programmers to solve planning problems
    efficiently. Under the hood, it combines optimization algorithms (including <emphasis>Metaheuristics</emphasis> such
    as <emphasis>Tabu Search</emphasis> and <emphasis>Simulated Annealing</emphasis>) with the power of score
    calculation by a rule engine.</para>

    <para>Drools Planner, like the rest of Drools, is business-friendly <emphasis>open source</emphasis> software under
    <link xlink:href="http://www.apache.org/licenses/LICENSE-2.0">the Apache Software License 2.0</link> (<link
    xlink:href="http://www.apache.org/foundation/licence-FAQ.html#WhatDoesItMEAN">layman's explanation</link>).</para>
  </section>

  <section>
    <title>What is a planning problem?</title>

    <section>
      <title>A planning problem is NP-complete</title>

      <para>All the use cases above are <emphasis>probably</emphasis> <link
      xlink:href="http://en.wikipedia.org/wiki/NP-complete">NP-complete</link>. In layman's terms, this means:</para>

      <itemizedlist>
        <listitem>
          <para>It's easy to verify a given solution to a problem in reasonable time.</para>
        </listitem>

        <listitem>
          <para>There is no silver bullet to find the optimal solution of a problem in reasonable time (*).</para>
        </listitem>
      </itemizedlist>

      <note>
        <para>(*) At least, none of the smartest computer scientists in the world have found such a silver bullet yet.
        But if they find one for 1 NP-complete problem, it will work for every NP-complete problem.</para>

        <para>In fact, there's a $ 1,000,000 reward for anyone that proves if <link
        xlink:href="http://en.wikipedia.org/wiki/P_%3D_NP_problem">such a silver bullet actually exists or
        not</link>.</para>
      </note>

      <para>The implication of this is pretty dire: solving your problem is probably harder than you anticipated,
      because the 2 common techniques won't suffice:</para>

      <itemizedlist>
        <listitem>
          <para>A brute force algorithm (even a smarter variant) will take too long.</para>
        </listitem>

        <listitem>
          <para>A quick algorithm, for example; in bin packing, <emphasis>putting in the largest items first</emphasis>,
          will return a solution that is usually far from optimal.</para>
        </listitem>
      </itemizedlist>

      <para><emphasis role="bold">Drools Planner does find a good solution in reasonable time for such planning
      problems.</emphasis></para>
    </section>

    <section>
      <title>A planning problem has (hard and soft) constraints</title>

      <para>Usually, a planning problem has at least 2 levels of constraints:</para>

      <itemizedlist>
        <listitem>
          <para>A <emphasis>(negative) hard constraint</emphasis> must not be broken. For example: <emphasis>1 teacher
          can not teach 2 different lessons at the same time</emphasis>.</para>
        </listitem>

        <listitem>
          <para>A <emphasis>(negative) soft constraint</emphasis> should not be broken if it can be avoided. For
          example: <emphasis>Teacher A does not like to teach on Friday afternoon</emphasis>.</para>
        </listitem>
      </itemizedlist>

      <para>Some problems have positive constraints too:</para>

      <itemizedlist>
        <listitem>
          <para>A <emphasis>positive soft constraint (or reward)</emphasis> should be fulfilled if possible. For
          example: <emphasis>Teacher B likes to teach on Monday morning</emphasis>.</para>

          <para>In practice, these are just like negative soft constraints, but with a positive weight.</para>
        </listitem>
      </itemizedlist>

      <para>Some toy problems (such as N Queens) only have hard constraints. Some problems have 3 or more levels of
      constraints, for example hard, medium and soft constraints.</para>

      <para>These constraints define the <emphasis>score function</emphasis> (AKA <emphasis>fitness function</emphasis>)
      of a planning problem. Each solution of a planning problem can be graded with a score. Because we 'll define these
      constraints as rules in the Drools Expert rule engine, <emphasis role="bold">adding constraints in Drools Planner
      is easy and scalable</emphasis>.</para>
    </section>

    <section>
      <title>A planning problem has a huge search space</title>

      <para>A planning problem has a number of <emphasis>solutions</emphasis>. There are several categories of
      solutions:</para>

      <itemizedlist>
        <listitem>
          <para>A <emphasis>possible solution</emphasis> is a solution that does or does not break any number of
          constraints. Planning problems tend to have a incredibly large number of possible solutions. Most of those
          solutions are worthless.</para>
        </listitem>

        <listitem>
          <para>A <emphasis>feasible solution</emphasis> is a solution that does not break any (negative) hard
          constraints. The number of feasible solutions tends to be relative to the number of possible solutions.
          Sometimes there are no feasible solutions. Every feasible solution is a possible solution.</para>
        </listitem>

        <listitem>
          <para>An <emphasis>optimal solution</emphasis> is a solution with the highest score. Planning problems tend to
          have 1 or a few optimal solutions. There is always at least 1 optimal solution, even in the case that there
          are no feasible solutions and the optimal solution isn't feasible.</para>
        </listitem>

        <listitem>
          <para>The <emphasis>best solution found</emphasis> is the solution with the highest score found by an
          implementation in a given amount of time. The best solution found is likely to be feasible.</para>
        </listitem>
      </itemizedlist>

      <para>Counterintuitively, the number of possible solutions is huge (if calculated correctly), even with a small
      dataset. As you'll see in the examples, most instances have a lot more possible solutions than the minimal number
      of atoms in the known universe (10^80). Because there is no silver bullet to find the optimal solution, any
      implementation is forced to evaluate at least a subset of all those possible solutions.</para>

      <para>Drools Planner supports several optimization algorithms to efficiently wade through that incredibly large
      number of possible solutions. Depending on the use case, some optimization algorithms perform better than others.
      <emphasis role="bold">In Drools Planner it is easy to switch the optimization algorithm</emphasis>, by changing
      the solver configuration in a few XML lines or by API.</para>
    </section>
  </section>

  <section>
    <title>Status of Drools Planner</title>

    <para>Drools Planner is production ready. The API is almost stable but backward incompatible changes can occur. With
    the recipe called <link
    xlink:href="https://github.com/droolsjbpm/drools-planner/blob/master/drools-planner-distribution/src/main/assembly/filtered-resources/UpgradeFromPreviousVersionRecipe.txt"><filename>UpgradeFromPreviousVersionRecipe.txt</filename></link>
    you can easily upgrade and deal with any backwards incompatible changes between versions. That recipe file is
    included in every release.</para>
  </section>

  <section>
    <title>Getting Drools Planner and running the examples</title>

    <section>
      <title>Getting the release package and running the examples</title>

      <para>You can download a release of Drools Planner from <link
      xlink:href="http://www.jboss.org/drools/downloads.html">the Drools download site</link>. To run an example, just
      open the directory <filename>examples</filename> and run the script (<filename>runExamples.sh</filename> on Linux
      and mac or <filename>runExamples.bat</filename> on windows) and pick an example in the GUI:</para>

      <programlisting>$ cd examples
$ ./runExamples.sh</programlisting>

      <programlisting>$ cd examples
$ runExamples.bat</programlisting>
    </section>

    <section>
      <title>Get it with maven, gradle, ivy, buildr or ANT</title>

      <para>The Drools Planner jars are available on <link
      xlink:href="http://search.maven.org/#search|ga|1|org.drools.planner">the central maven repository</link> (and
      <link xlink:href="https://repository.jboss.org/nexus/index.html#nexus-search;gav~org.drools.planner~~~~">the JBoss
      maven repository</link>).</para>

      <para>If you use maven, just add a dependency to <literal>drools-planner-core</literal> in your project's
      <filename>pom.xml</filename>:</para>

      <programlisting language="xml">    &lt;dependency&gt;
        &lt;groupId&gt;org.drools.planner&lt;/groupId&gt;
        &lt;artifactId&gt;drools-planner-core&lt;/artifactId&gt;
        &lt;version&gt;5.x&lt;/version&gt;
    &lt;/dependency&gt;</programlisting>

      <para>This is similar for gradle, ivy and buildr.</para>

      <para>If you're still using ant (without ivy), copy all the jars from the download zip's
      <filename>binaries</filename> directory and manually verify that your classpath doesn't contain duplicate
      jars.</para>
    </section>

    <section>
      <title>Build it from source</title>

      <para>You can also easily build it from source yourself. Clone drools from GitHub and do a maven 3 build:</para>

      <programlisting>$ git clone git@github.com:droolsjbpm/drools-planner.git drools-planner
...
$ cd drools-planner
$ mvn -DskipTests clean install
...</programlisting>

      <para>After that, you can run any example directly from the command line, just run this command and pick an
      example:</para>

      <programlisting>$ cd drools-planner-examples
$ mvn exec:exec
...</programlisting>
    </section>
  </section>

  <section>
    <title>Questions, issues and blog</title>

    <para>Your questions and comments are welcome on <link xlink:href="http://www.jboss.org/drools/lists.html">the user
    mailing list</link>. Start the subject of your mail with <literal>[planner]</literal>. You can read/write to the
    user mailing list without littering your mailbox through <link
    xlink:href="http://drools.46999.n3.nabble.com/Drools-User-forum-f47000.html">this web forum</link> or <link
    xlink:href="nntp://news.gmane.org/gmane.comp.java.drools.user">this newsgroup</link>.</para>

    <para>Feel free to report an issue (such as a bug, improvement or a new feature request) for the Drools Planner code
    or for this manual to <link xlink:href="https://jira.jboss.org/jira/browse/JBRULES">the drools issue tracker</link>.
    Select the component <literal>drools-planner</literal>.</para>

    <para>Pull requests (and patches) are very welcome and get priority treatment! Include the pull request link to a
    JIRA issue and optionally send a mail to the dev mailing list to get the issue fixed fast. By open sourcing your
    improvements, you 'll benefit from our peer review, improvements made upon your improvements and maybe even a thank
    you on our blog.</para>

    <para>Check <link xlink:href="http://blog.athico.com/search/label/planner">our blog</link> and twitter (<link
    xlink:href="http://twitter.com/geoffreydesmet">Geoffrey De Smet</link>) for news and articles. If Drools Planner
    helps you solve your problem, don't forget to blog or tweet about it!</para>
  </section>
</chapter>
