{
  "filters": {
    "revapi": {
      "filter": {
        "elements": {
          "exclude": [
            "method .* org\\.optaplanner\\.core\\.config.*::(?!(set|get)).*",
            "parameter .* org\\.optaplanner\\.core\\.config.*::(?!(set|get)).*"
          ]
        }
      },
      "java": {
        "filter": {
          "packages": {
            "comment": "We don't want to check transitive classes, since we already check them in their own module.",
            "regex": true,
            "include": [
              "org\\.optaplanner\\.core\\.api.*",
              "org\\.optaplanner\\.core\\.config.*"
            ]
          }
        }
      }
    }
  },

  "ignores": {
    "revapi": {
      "_comment": "Changes between 7.0.0.Final and the current branch. These changes are desired and thus ignored. They should be removed when 7.1.0.Final is available.",
      "ignore": [
        {
          "code": "java.method.addedToInterface",
          "new": "method boolean org.optaplanner.core.api.solver.Solver<Solution_>::addProblemFactChanges(java.util.List<org.optaplanner.core.impl.solver.ProblemFactChange<Solution_>>)",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "Solver",
          "methodName": "addProblemFactChanges",
          "elementKind": "method",
          "justification": "PLANNER-778 Solver.addAllProblemFactChanges(List)"
        },
        {
        "code": "java.annotation.added",
        "old": "field org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig.variableName",
        "new": "field org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig.variableName",
        "annotationType": "com.thoughtworks.xstream.annotations.XStreamAsAttribute",
        "elementKind": "annotation",
        "justification": "Less verbose power configuration. See upgrade recipe. Backwards compatible."
        }
      ]
    }
  }
}
